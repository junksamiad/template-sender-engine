#!/bin/bash
# API Gateway Deployment Script for AI Multi-Comms Engine (Development)
# This script creates and configures the API Gateway for testing

set -e # Exit on error

# Set AWS region
export AWS_REGION=eu-north-1

# Set output file path (same directory as this script)
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
OUTPUT_FILE="$SCRIPT_DIR/api_gateway_config.txt"
TEMPLATE_FILE="$SCRIPT_DIR/stage_patch_template.json"
PATCH_FILE="$SCRIPT_DIR/stage_patch_temp.json"

# Function to log to both console and file
log() {
  echo "$1"
  echo "$1" >> "$OUTPUT_FILE"
}

# Cleanup temporary patch file on exit
trap 'rm -f "$PATCH_FILE"' EXIT

# Initialize output file
echo "# API Gateway Configuration - $(date)" > "$OUTPUT_FILE"
echo "# Generated by deploy_api_gateway.sh" >> "$OUTPUT_FILE"
echo "---------------------------------------" >> "$OUTPUT_FILE"

# Step 1: Create the API Gateway
echo "Creating API Gateway..."
API_ID=$(aws apigateway create-rest-api \
  --name "ai-multi-comms-dev-api" \
  --description "Development API for AI Multi-Comms Engine" \
  --endpoint-configuration "types=REGIONAL" \
  --query 'id' \
  --output text)

echo "API Gateway created with ID: $API_ID"

# Get the root resource ID
ROOT_RESOURCE_ID=$(aws apigateway get-resources \
  --rest-api-id $API_ID \
  --query 'items[?path==`/`].id' \
  --output text)

echo "Root resource ID: $ROOT_RESOURCE_ID"

# Step 2: Create the /initiate-conversation resource
echo "Creating /initiate-conversation resource..."
RESOURCE_ID=$(aws apigateway create-resource \
  --rest-api-id $API_ID \
  --parent-id $ROOT_RESOURCE_ID \
  --path-part "initiate-conversation" \
  --query 'id' \
  --output text)

echo "Resource created with ID: $RESOURCE_ID"

# Step 3: Create POST method
echo "Creating POST method..."
aws apigateway put-method \
  --rest-api-id $API_ID \
  --resource-id $RESOURCE_ID \
  --http-method POST \
  --authorization-type "NONE" \
  --api-key-required

# Step 4: Set up mock integration for initial testing
echo "Setting up mock integration..."
aws apigateway put-integration \
  --rest-api-id $API_ID \
  --resource-id $RESOURCE_ID \
  --http-method POST \
  --type MOCK \
  --request-templates '{"application/json": "{\"statusCode\": 200}"}'

# Step 5: Configure mock integration response
echo "Configuring mock integration response..."
aws apigateway put-integration-response \
  --rest-api-id $API_ID \
  --resource-id $RESOURCE_ID \
  --http-method POST \
  --status-code 200 \
  --response-templates '{"application/json": "{\n  \"status\": \"success\",\n  \"message\": \"API Gateway configuration is working\",\n  \"request_id\": \"mock-request-id\"\n}"}'

# Step 6: Configure method response
echo "Configuring method response..."
aws apigateway put-method-response \
  --rest-api-id $API_ID \
  --resource-id $RESOURCE_ID \
  --http-method POST \
  --status-code 200 \
  --response-models '{"application/json": "Empty"}' \
  --response-parameters '{"method.response.header.Access-Control-Allow-Origin": false}'

# Step 7: Set up CORS - Create OPTIONS method
echo "Setting up CORS - Creating OPTIONS method..."
aws apigateway put-method \
  --rest-api-id $API_ID \
  --resource-id $RESOURCE_ID \
  --http-method OPTIONS \
  --authorization-type "NONE"

# Step 8: Configure OPTIONS integration
echo "Configuring OPTIONS integration..."
aws apigateway put-integration \
  --rest-api-id $API_ID \
  --resource-id $RESOURCE_ID \
  --http-method OPTIONS \
  --type MOCK \
  --request-templates '{"application/json": "{\"statusCode\": 200}"}'

# Step 9: Configure OPTIONS method response
echo "Configuring OPTIONS method response..."
aws apigateway put-method-response \
  --rest-api-id $API_ID \
  --resource-id $RESOURCE_ID \
  --http-method OPTIONS \
  --status-code 200 \
  --response-models '{"application/json": "Empty"}' \
  --response-parameters '{
    "method.response.header.Access-Control-Allow-Headers": false,
    "method.response.header.Access-Control-Allow-Methods": false,
    "method.response.header.Access-Control-Allow-Origin": false,
    "method.response.header.Access-Control-Max-Age": false
  }'

# Step 10: Configure OPTIONS integration response
echo "Configuring OPTIONS integration response..."
aws apigateway put-integration-response \
  --rest-api-id $API_ID \
  --resource-id $RESOURCE_ID \
  --http-method OPTIONS \
  --status-code 200 \
  --response-parameters '{
    "method.response.header.Access-Control-Allow-Headers": "'"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"'",
    "method.response.header.Access-Control-Allow-Methods": "'"'POST,OPTIONS'"'",
    "method.response.header.Access-Control-Allow-Origin": "'"'*'"'",
    "method.response.header.Access-Control-Max-Age": "'"'300'"'"
  }'

# Step 11: Create a usage plan
echo "Creating usage plan..."
USAGE_PLAN_ID=$(aws apigateway create-usage-plan \
  --name "dev-usage-plan" \
  --description "Development usage plan for AI Multi-Comms Engine" \
  --throttle "rateLimit=10,burstLimit=20" \
  --query 'id' \
  --output text)

echo "Usage plan created with ID: $USAGE_PLAN_ID"

# Step 12: Create API key for testing
echo "Creating API key for testing..."
API_KEY_ID=$(aws apigateway create-api-key \
  --name "test-company-dev" \
  --description "Development API key for Test Company" \
  --enabled \
  --query 'id' \
  --output text)

API_KEY_VALUE=$(aws apigateway get-api-key \
  --api-key $API_KEY_ID \
  --include-value \
  --query 'value' \
  --output text)

echo "API key created with ID: $API_KEY_ID"
echo "API key value: $API_KEY_VALUE"

# Step 13: Deploy the API to dev stage
echo "Deploying API to dev stage..."
DEPLOYMENT_ID=$(aws apigateway create-deployment \
  --rest-api-id $API_ID \
  --stage-name dev \
  --description "Development deployment" \
  --query 'id' \
  --output text)

echo "API deployed with deployment ID: $DEPLOYMENT_ID"

# Step 14: Associate the stage with the usage plan
echo "Associating stage with usage plan..."
aws apigateway update-usage-plan \
  --usage-plan-id $USAGE_PLAN_ID \
  --patch-operations "[{\"op\": \"add\", \"path\": \"/apiStages\", \"value\": \"$API_ID:dev\"}]"

# Step 15: Add the API key to the usage plan
echo "Adding API key to usage plan..."
aws apigateway create-usage-plan-key \
  --usage-plan-id $USAGE_PLAN_ID \
  --key-id $API_KEY_ID \
  --key-type "API_KEY"

# Step 16: Enable CloudWatch logs for the API
echo "Enabling CloudWatch logs..."
# Get AWS Account ID
AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
# Create a temporary patch file by substituting placeholders in the template
sed -e "s/{{ACCOUNT_ID}}/$AWS_ACCOUNT_ID/g" -e "s/{{API_ID}}/$API_ID/g" "$TEMPLATE_FILE" > "$PATCH_FILE"

# Apply the update stage command using the generated file
aws apigateway update-stage \
  --rest-api-id $API_ID \
  --stage-name dev \
  --patch-operations "file://$PATCH_FILE"

echo "CloudWatch logs enabled."

# Save configuration details to output file
log ""
log "API Gateway setup complete!"
log "--------------------------------------------"
log "API Gateway ID: $API_ID"
log "API Gateway Endpoint: https://$API_ID.execute-api.$AWS_REGION.amazonaws.com/dev"
log "Test resource: https://$API_ID.execute-api.$AWS_REGION.amazonaws.com/dev/initiate-conversation"
log "API Key: $API_KEY_VALUE"
log ""
log "To test with curl:"
log "curl -X POST https://$API_ID.execute-api.$AWS_REGION.amazonaws.com/dev/initiate-conversation \\"
log "  -H \"Content-Type: application/json\" \\"
log "  -H \"x-api-key: $API_KEY_VALUE\" \\"
log "  -d '{\"company_data\":{\"company_id\":\"test-company\",\"project_id\":\"test-project\"},\"recipient_data\":{\"recipient_first_name\":\"Test\",\"recipient_last_name\":\"User\",\"recipient_tel\":\"+1234567890\",\"recipient_email\":\"test@example.com\",\"comms_consent\":true},\"request_data\":{\"request_id\":\"550e8400-e29b-41d4-a716-446655440000\",\"channel_method\":\"whatsapp\",\"initial_request_timestamp\":\"2023-06-15T14:30:45.123Z\"}}'"
log ""
log "Configuration details saved to: $OUTPUT_FILE"
echo "Save these details - you'll need them for further testing and integration!" 